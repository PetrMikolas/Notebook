@page "/Account/Manage/ChangePassword"

@using System.ComponentModel.DataAnnotations
@using Notebook.Components.Account
@using Microsoft.AspNetCore.Identity

@inject UserManager<AppUser> UserManager
@inject SignInManager<AppUser> SignInManager
@inject IdentityUserAccessor UserAccessor
@inject IdentityRedirectManager RedirectManager
@inject ILogger<ChangePassword> Logger

<PageTitle>Správa účtu - Heslo</PageTitle>

<h3>Změnit heslo</h3>
<StatusMessage Message="@message" />
<EditForm Model="Input" FormName="change-password" OnValidSubmit="OnValidSubmitAsync" method="post">
    <DataAnnotationsValidator />   
    <div class="form-floating mb-3">
        <InputText type="password" @bind-Value="Input.OldPassword" class="form-control" autocomplete="current-password" aria-required="true" placeholder="Please enter your old password." />
        <label for="old-password" class="form-label">Staré heslo</label>
        <ValidationMessage For="() => Input.OldPassword" class="text-danger" />
    </div>
    <div class="form-floating mb-3">
        <InputText type="password" @bind-Value="Input.NewPassword" class="form-control" autocomplete="new-password" aria-required="true" placeholder="Please enter your new password." />
        <label for="new-password" class="form-label">Nové heslo</label>
        <ValidationMessage For="() => Input.NewPassword" class="text-danger" />
    </div>
    <div class="form-floating mb-3">
        <InputText type="password" @bind-Value="Input.ConfirmPassword" class="form-control" autocomplete="new-password" aria-required="true" placeholder="Please confirm your new password." />
        <label for="confirm-password" class="form-label">Potvrdit nové heslo</label>
        <ValidationMessage For="() => Input.ConfirmPassword" class="text-danger" />
    </div>
    <button type="submit" class="w-100 btn btn-lg btn-success">Uložit</button>
</EditForm>

@code {
    private string? message;
    private AppUser user = default!;
    private bool hasPassword;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        user = await UserAccessor.GetRequiredUserAsync(HttpContext);

        hasPassword = await UserManager.HasPasswordAsync(user);
        if (!hasPassword)
        {
            RedirectManager.RedirectTo("Account/Manage/SetPassword");
        }
    }

    private async Task OnValidSubmitAsync()
    {
        var changePasswordResult = await UserManager.ChangePasswordAsync(user, Input.OldPassword, Input.NewPassword);

        if (!changePasswordResult.Succeeded)
        {
            message = $"Error: {string.Join(",", changePasswordResult.Errors.Select(error => error.Description))}";
            return;
        }

        await SignInManager.RefreshSignInAsync(user);
        Logger.LogInformation("User changed their password successfully.");

        RedirectManager.RedirectToCurrentPageWithStatus("Vaše heslo bylo změněno.", HttpContext);
    }

    private sealed class InputModel
    {
        [Required(ErrorMessage = "Povinný údaj")]
        [DataType(DataType.Password)]
        [Display(Name = "Stávající heslo")]
        public string OldPassword { get; set; } = "";

        [Required(ErrorMessage = "Povinný údaj")]
        [StringLength(100, ErrorMessage = "{0} musí mít alespoň {2} a maximálně  {1} znaků", MinimumLength = 6)]
        [DataType(DataType.Password)]
        [Display(Name = "Nové heslo")]
        public string NewPassword { get; set; } = "";

        [DataType(DataType.Password)]
        [Display(Name = "Zopakujte nové heslo")]
        [Compare("NewPassword", ErrorMessage = "Heslo a potvrzovací heslo se neshodují")]
        public string ConfirmPassword { get; set; } = "";
    }
}
