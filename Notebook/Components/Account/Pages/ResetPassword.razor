@page "/Account/ResetPassword"

@using System.ComponentModel.DataAnnotations
@using System.Text
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using Notebook.Models

@inject IdentityRedirectManager RedirectManager
@inject UserManager<AppUser> UserManager

<PageTitle>Obnovení hesla</PageTitle>

<div class="mt-3 m-5" style="max-width:570px">
    <h1>Obnovení hesla</h1>
 
    <StatusMessage Message="@Message" />
    <EditForm Model="Input" FormName="reset-password" OnValidSubmit="OnValidSubmitAsync" method="post">
        <DataAnnotationsValidator />
        <input type="hidden" name="Input.Code" value="@Input.Code" />
        <div class="form-floating mb-3">
            <InputText @bind-Value="Input.Email" class="form-control" autocomplete="username" aria-required="true" placeholder="name@example.com" />
            <label for="email" class="form-label">Zadejte e-mail, který jste použili při registraci</label>
            <ValidationMessage For="() => Input.Email" class="text-danger" />
        </div>
        <div class="form-floating mb-3">
            <InputText type="password" @bind-Value="Input.Password" class="form-control" autocomplete="new-password" aria-required="true" placeholder="Please enter your password." />
            <label for="password" class="form-label">Heslo</label>
            <ValidationMessage For="() => Input.Password" class="text-danger" />
        </div>
        <div class="form-floating mb-3">
            <InputText type="password" @bind-Value="Input.ConfirmPassword" class="form-control" autocomplete="new-password" aria-required="true" placeholder="Please confirm your password." />
            <label for="confirm-password" class="form-label">Potvrdit heslo</label>
            <ValidationMessage For="() => Input.ConfirmPassword" class="text-danger" />
        </div>
        <button type="submit" class="w-100 btn btn-lg btn-success">Obnovit</button>
    </EditForm>
</div>

@code {
    private IEnumerable<IdentityError>? identityErrors;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? Code { get; set; }

    private string? Message => identityErrors is null ? null : $"Error: {string.Join(" ", identityErrors.Select(error => error.Description))}";

    protected override void OnInitialized()
    {
        if (Code is null)
        {
            RedirectManager.RedirectTo("Account/InvalidPasswordReset");
        }

        Input.Code = Encoding.UTF8.GetString(WebEncoders.Base64UrlDecode(Code));
    }

    private async Task OnValidSubmitAsync()
    {
        var user = await UserManager.FindByEmailAsync(Input.Email);
        if (user is null)
        {
            // Don't reveal that the user does not exist
            RedirectManager.RedirectTo("Account/ResetPasswordConfirmation");
        }

        var result = await UserManager.ResetPasswordAsync(user, Input.Code, Input.Password);
        if (result.Succeeded)
        {
            RedirectManager.RedirectTo("Account/ResetPasswordConfirmation");
        }

        identityErrors = result.Errors;
    }

    private sealed class InputModel
    {
        [Required(ErrorMessage = "Povinný údaj")]
        [EmailAddress(ErrorMessage = "Zadaný e-mail není platná e-mailová adresa")]
        public string Email { get; set; } = string.Empty;

        [Required(ErrorMessage = "Povinný údaj")]
        [StringLength(100, ErrorMessage = "{0} musí mít alespoň {2} a maximálně  {1} znaků", MinimumLength = 6)]
        [DataType(DataType.Password)]
        [Display(Name = "Heslo")]
        public string Password { get; set; } = string.Empty;

        [DataType(DataType.Password)]
        [Display(Name = "Confirm password")]
        [Compare("Password", ErrorMessage = "Heslo a potvrzovací heslo se neshodují")]
        public string ConfirmPassword { get; set; } = string.Empty;

        [Required(ErrorMessage = "Povinný údaj")]
        public string Code { get; set; } = string.Empty;
    }
}