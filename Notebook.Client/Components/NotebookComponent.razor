@page "/"

@using Microsoft.AspNetCore.Components.Authorization
@using Notebook.Client.Models
@using Notebook.Client.Services.Api
@using Microsoft.AspNetCore.Authorization
@using System.ComponentModel
@using System.Reflection
@using static Notebook.Client.Components.ModalFontSettings
@using static Notebook.Client.Components.ModalSection

@inject IJSRuntime JS
@inject IApiService ApiService
@inject IApiClient ApiClient
@inject NotificationService NotificationService
@attribute [Authorize]

@rendermode InteractiveWebAssembly

<PageTitle>Zápisník</PageTitle>

<AuthorizeView>
    <Authorized>
        <AntiforgeryToken />

        <div id="wrapper" style="@_wrapperStyle">
            <div id="header" style="@(_isPageFullcreen ? "display: none;" : "display: block;")">
                <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Left" Class="rz-unselectable-text rz-m-3 rz-ms-4">
                    <RadzenButton Click=@(() => OpenModalSection(Operation.Create)) Shade="Shade.Lighter" Text="Nový oddíl" ButtonStyle="ButtonStyle.Info" Size="ButtonSize.Small" title="Vytvořit oddíl" />

                    <RadzenStack Orientation="Orientation.Horizontal" Visible=@_isSelectedSection>
                        <RadzenButton Click=@(() => OpenModalSection(Operation.Edit)) Shade="Shade.Lighter" Text="Editovat oddíl" ButtonStyle="ButtonStyle.Warning" Size="ButtonSize.Small" title="Editovat oddíl" />
                        <RadzenButton Click=@(() => _isOpenModalDialogSection = true) Shade="Shade.Lighter" Text="Odstranit oddíl" ButtonStyle="ButtonStyle.Danger" Size="ButtonSize.Small" title="Odstranit oddíl" />
                        <RadzenButton Click=@(() => _isOpenModalPage = true) Shade="Shade.Lighter" Text="Přidat stránku" ButtonStyle="ButtonStyle.Success" Size="ButtonSize.Small" title="Přidat stránku do oddílu" />
                    </RadzenStack>
                </RadzenStack>
            </div>

            <div id="side-panel-header" style="@(_isPageFullcreen ? "display: none;" : "display: block;")">
                <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Center" Gap="12" Style="padding:11px 16px;">
                    <RadzenButton Click=@Refresh Shade="Shade.Lighter" Size="ButtonSize.Small" Icon="cached" ButtonStyle="ButtonStyle.Success" Style="height:28.5px; width:30px;" title="Obnovit seznam (rozbalit/sbalit)" />
                    <RadzenTextBox id="input-search" @oninput=@OnInputSearch Value=@_inputSearchText MaxLength="30" Style="height:30px; width:200px; padding:0px 6px; outline:none;" Placeholder="Vyhledat oddíl nebo stránku" />
                </RadzenStack>

                <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Center" AlignItems="AlignItems.Center" Gap="4" Style="padding:0px 16px 12px; display: flex;">
                    <span>Řadit dle:</span>
                    <RadzenDropDown @bind-Value=@_sortOrder Data="@(GetEnumValuesWithDescriptions<SortOrder>())" TextProperty="Key" ValueProperty="Value" Change=@OnSortSections Style="flex:1; height:30px; padding: 3px 6px; font-family: Calibri;" title="Vyberte způsob řazení oddílů" />
                </RadzenStack>
            </div>

            <div id="side-panel" style="@(_isPageFullcreen ? "display: none;" : "display: block;")">
                <LoadingSpinner Visible=@_isVisibleLoadingSpinner />

                <RadzenTree Data=@_sections Change=@ChangedSelectedTreeOptions @bind-Value=@_selectedTreeOptions Style="flex:1; margin:0px 7px; --rz-tree-node-toggle-width:20px">
                    <RadzenTreeLevel TextProperty="Name" ChildrenProperty="Pages" Expanded=@SetTreeExpandedState />
                    <RadzenTreeLevel TextProperty="Title" HasChildren=@(pages => false) />
                </RadzenTree>
            </div>

            <div id="page-header">
                <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Left" Class="rz-m-3" Style="height:28px" Visible=@_isSelectedPage>
                    <RadzenTextBox id="title" Value="@GetSelectedPageTitle()" @oninput=@OnInputTitle MaxLength="29" Placeholder="Napište název stránky" Style="height:30px; width:350px; padding:7px; font-size:23px; font-family:Calibri; outline:none; border:none; --rz-input-focus-shadow:none;" />

                    <RadzenButton Click=@(() => SavePageAsync()) Shade="Shade.Lighter" Text="Uložit" ButtonStyle="ButtonStyle.Success" Size="ButtonSize.Small" title="Uložit stránku" />
                    <RadzenButton Click=@ResetPage Shade="Shade.Lighter" Text="Resetovat" ButtonStyle="ButtonStyle.Warning" Size="ButtonSize.Small" title="Resetovat stránku" />
                    <RadzenButton Click=@(() => _isOpenModalDialogPage = true) Shade="Shade.Lighter" Text="Odstranit" ButtonStyle="ButtonStyle.Danger" Size="ButtonSize.Small" title="Odstranit stránku" />

                    <input id="input-image" type="file" accept="image/*" onchange="insertImageToDiv(this.id, 'page-content', @GetSelectedImageSize())" hidden />
                    <label class="rz-button rz-button-sm rz-variant-filled rz-info rz-shade-lighter icon" for="input-image" title="Nahrát obrázek"><i class="fa fa-upload me-1"></i>OBRÁZEK</label>

                    <RadzenDropDown @bind-Value=@_selectedImageSize Data=@GetImageSizeOptions() TextProperty="Key" ValueProperty="Value" Style="width:145px; height:30px; padding: 3px 6px; font-family: Calibri;" Placeholder="Výška obrázku" title="Vyberte max. výšku vkládaného obrázku (výchozí je 25px)" />

                    <button @onclick=@(() => _isOpenModalFontSettings = true) style="height: 30px; padding: 0; border: 1px solid lightgrey; border-radius: 4px; overflow: hidden;" title="Nastavit písmo">
                        <img src="images\font.png" style="width: 100%; height: 100%; padding:6px; background-color:white; pointer-events: none;">
                    </button>
                </RadzenStack>
            </div>

            <div id=@PAGE_CONTENT_ID contenteditable="true" style="@_setDisplayProperty;" ondragover="handleDragOver(event)" ondrop="handleDrop(event, @GetSelectedImageSize())">
            </div>

            <div id="page-footer">
                @if (_selectedPage is not null && !_isSelectedSection)
                {
                    <button id="page-toggle-fullscreen-btn" class="rz-button rz-button-sm rz-variant-filled rz-base rz-shade-lighter icon" @onclick="@TogglePageFullscreen" title="@_togglePageFullscreenTitle  ">
                        <i class="@_togglePageFullscreenIconClass" style="font-size:15px;"></i>
                    </button>

                    <span class="page-footer-content" title="Název oddílu a titulek stránky">@GetSectionNameById(_selectedPage.SectionId) &#10784; @_selectedPage.Title</span>
                    <span class="page-footer-content" title="Datum a čas vytvoření stránky">Vytvořeno: @_selectedPage.CreatedAt.LocalDateTime</span>
                    @if (_selectedPage.UpdatedAt is not null)
                    {
                        <span class="page-footer-content" title="Datum a čas upravení stránky">Upraveno: @_selectedPage.UpdatedAt!.Value.LocalDateTime</span>
                    }
                    <span class="page-footer-content" title="Velikost stránky">Velikost: @Utility.FormatBytes(_pageSizeInBytes)</span>
                }
            </div>

            <div id="alert-message" style="@_alertMessageStyle">
                @foreach (var message in _alertMessages)
                {
                    <RadzenStack Orientation="Orientation.Horizontal" Gap="16px" class="rz-unselectable-text">
                        <RadzenAlert AlertStyle="message.Style" Variant="Variant.Filled" Shade="Shade.Default" Size="AlertSize.Small" ShowIcon="message.ShowIcon" AllowClose="message.AllowClose" class="rz-ms-4 rz-me-4 rz-mt-4 rz-mb-0">
                            @message.Text
                        </RadzenAlert>
                    </RadzenStack>
                }
            </div>
        </div>

        <ModalSection @bind-IsOpen=@_isOpenModalSection
                      ModalOperation=@_modalSectionOperation
                      Section=@_selectedSection
                      OnSubmit=@OnSubmitModalSection />

        <ModalDialogDeleteSection @bind-IsOpen=@_isOpenModalDialogSection
                                  SectionName=@GetSelectedSectionName()
                                  OnDialog=@OnDialogDeleteSection />

        <ModalPage @bind-IsOpen=@_isOpenModalPage
                   OnSubmit=@OnSubmitModalPage />

        <ModalDialogDeletePage @bind-IsOpen=@_isOpenModalDialogPage
                               PageTitle=@GetSelectedPageTitle()
                               OnDialog=@OnDialogDeletePage />

        <ModalFontSettings @bind-IsOpen=@_isOpenModalFontSettings
                           OnSubmit=@OnSubmitFontSettings />

        <RadzenComponents />

    </Authorized>
</AuthorizeView>

@code {
    private int _selectedImageSize;
    private long _pageSizeInBytes;
    private bool _isVisibleLoadingSpinner = true;
    private bool _isOpenModalPage;
    private bool _isOpenModalSection;
    private bool _isOpenModalDialogPage;
    private bool _isOpenModalDialogSection;
    private bool _isOpenModalFontSettings;
    private bool _isChangeAfterSavingPage;
    private bool _isTreeExpanded;
    private bool _isSelectedPage;
    private bool _isSelectedSection;
    private bool _isPageFullcreen;
    private string _setDisplayProperty = "display: none;";
    private string _inputSearchText = string.Empty;
    private string _wrapperStyle = string.Empty;
    private string _alertMessageStyle = string.Empty;
    private string _togglePageFullscreenIconClass = "fa fa-expand";
    private string _togglePageFullscreenTitle = "Zobrazit stránku na celou obrazovku";
    private const string PAGE_CONTENT_ID = "page-content";
    private object? _selectedTreeOptions;
    private PageDto? _selectedPage;
    private SectionDto? _selectedSection;
    private List<SectionDto> _sections = [];
    private ModalSection.Operation _modalSectionOperation;
    private List<AlertMessage> _alertMessages = [];
    private SortOrder _sortOrder = SortOrder.ByDateAsc;

    /// <summary>
    /// Sorts the sections based on the specified sort order.
    /// </summary>
    /// <param name="value">The sort order to apply. If not specified, the sections are sorted by date in ascending order by default.</param>
    private void OnSortSections(object value)
    {
        if (value is not SortOrder sortOrder)
        {
            sortOrder = SortOrder.ByDateAsc; // Defaultní řazení
        }

        _sections = sortOrder switch
        {
            SortOrder.ByDateDesc => _sections.OrderByDescending(item => item.Id).ToList(),
            SortOrder.ByNameAsc => _sections.OrderBy(item => item.Name).ToList(),
            SortOrder.ByNameDesc => _sections.OrderByDescending(item => item.Name).ToList(),
            _ => _sections.OrderBy(item => item.Id).ToList()
        };
    }

    /// <summary>
    /// Defines the various sorting orders available for sorting data.
    /// </summary>
    private enum SortOrder
    {
        /// <summary>
        /// Sorts data by creation date in ascending order.
        /// </summary>
        [Description("data vytvoření ↑")]
        ByDateAsc,

        /// <summary>
        /// Sorts data by creation date in descending order.
        /// </summary>
        [Description("data vytvoření ↓")]
        ByDateDesc,

        /// <summary>
        /// Sorts data by name in ascending order.
        /// </summary>
        [Description("názvu ↑")]
        ByNameAsc,

        /// <summary>
        /// Sorts data by name in descending order.
        /// </summary>
        [Description("názvu ↓")]
        ByNameDesc
    }


    /// <summary>
    /// Retrieves the description of the specified enum <paramref name="value"/>.
    /// </summary>
    /// <param name="value">The enum value for which to retrieve the description.</param>
    /// <returns>
    /// The description of the enum value if a <see cref="DescriptionAttribute"/> is present, otherwise the string representation of the enum value.    
    /// </returns>
    private string GetDescriptionFromEnum(Enum value)
    {
        var field = value.GetType().GetField(value.ToString());

        if (field?.GetCustomAttribute<DescriptionAttribute>() is DescriptionAttribute attribute)
        {
            return attribute.Description;
        }

        return value.ToString();
    }     

    /// <summary>
    /// Retrieves a collection of key-value pairs where each pair represents an enum value and its corresponding description.
    /// </summary>
    /// <typeparam name="TEnum">The type of the enum to retrieve values and descriptions for.</typeparam>
    /// <returns>A collection of <see cref="KeyValuePair{string, TEnum}"/> where each key is the description of the enum value and each value is the enum value itself.</returns>
    private IEnumerable<KeyValuePair<string, TEnum>> GetEnumValuesWithDescriptions<TEnum>() where TEnum : Enum
    {
        return Enum.GetValues(typeof(TEnum))
                   .Cast<TEnum>()
                   .Select(enumValue => new KeyValuePair<string, TEnum>(GetDescriptionFromEnum(enumValue), enumValue));
    }

    /// <summary>
    /// Sets the expanded state of the tree node based on the selected section.
    /// </summary>
    /// <param name="data">The data representing the section.</param>
    /// <returns>True if the tree node should be expanded, otherwise false.</returns>
    private bool SetTreeExpandedState(object data)
    {
        if (_isTreeExpanded)
        {
            return true;
        }

        var section = data as SectionDto;

        if (section is not null && _selectedSection is not null)
        {
            return section.Id == _selectedSection.Id;
        }

        return false;
    }

    /// <summary>
    /// Handles the input search event to filter sections and pages based on the search text.
    /// </summary>
    /// <param name="args">The event arguments containing the search text.</param>    
    private async Task OnInputSearch(ChangeEventArgs args)
    {
        var input = args.Value?.ToString();

        if (!string.IsNullOrWhiteSpace(input))
        {
            _sections = await ApiService.SearchValuesAsync(input.Trim());
            _isTreeExpanded = true;
        }
        else
        {
            _sections = await ApiService.GetSectionsAsync();
            _isTreeExpanded = false;
        }
    }

    /// <summary>
    /// Handles the input title event to update the selected page title.
    /// </summary>
    /// <param name="args">The event arguments containing the new title.</param>
    private void OnInputTitle(ChangeEventArgs args)
    {
        if (_selectedPage is not null)
        {
            _selectedPage.Title = args.Value?.ToString() ?? string.Empty;
        }
    }

    /// <summary>
    /// Handles the font settings submission event to apply the selected font settings to the page content.
    /// </summary>
    /// <param name="fontSettings">The font settings to apply.</param>    
    private async Task OnSubmitFontSettings(FontSettings fontSettings)
    {
        await JS.InvokeVoidAsync(
            "applyFontSettings",
            fontSettings.Family,
            fontSettings.Size,
            fontSettings.Weight,
            fontSettings.Style,
            fontSettings.Color,
            fontSettings.Background,
            PAGE_CONTENT_ID
        );

        StateHasChanged();
    }

    /// <summary>
    /// Refreshes the section list by reloading the sections and resetting the selected page and section.
    /// </summary>    
    private async Task Refresh()
    {
        _selectedPage = null;
        _selectedSection = null;
        _sections = await ApiService.GetSectionsAsync();
        _isTreeExpanded = !_isTreeExpanded;
        _sortOrder = SortOrder.ByDateAsc;
        DisplayElementsAccordingToSelectedTreeOption(SelectedTreeOptions.None);

        try
        {
            await JS.InvokeVoidAsync("setFocusById", "input-search");
        }
        catch (JSException ex)
        {
            _ = ApiClient.SendErrorAsync(ex.ToString());
        }
    }

    /// <summary>
    /// Resets the selected page by clearing its content.
    /// </summary>    
    private async Task ResetPage()
    {
        if (_selectedPage is not null)
        {
            _pageSizeInBytes = 0;
            _selectedImageSize = 0;

            try
            {
                await JS.InvokeVoidAsync("deleteElementContentById", PAGE_CONTENT_ID);
                await JS.InvokeVoidAsync("setFocusById", PAGE_CONTENT_ID);
            }
            catch (JSException ex)
            {
                _ = ApiClient.SendErrorAsync(ex.ToString());
            }
        }
    }

    /// <summary>
    /// Toggles the fullscreen mode of the page.
    /// </summary>
    private void TogglePageFullscreen()
    {
        _isPageFullcreen = !_isPageFullcreen;

        if (_isPageFullcreen)
        {
            _togglePageFullscreenIconClass = "fa fa-compress";
            _togglePageFullscreenTitle = "Vrátit stránku na původní velikost";
            _alertMessageStyle = "top: 104px; left: 0px;";
            _wrapperStyle = "grid-template-rows: 52px 1fr 52px;" +
                            "grid-template-columns: minmax(1125px, 1fr);" +
                            "grid-template-areas: 'page-header' 'page-content' 'page-footer';";
        }
        else
        {
            _togglePageFullscreenIconClass = "fa fa-expand";
            _togglePageFullscreenTitle = "Zobrazit stránku na celou obrazovku";
            _alertMessageStyle = string.Empty;
            _wrapperStyle = string.Empty;
        }
    }

    /// <summary>
    /// Handles the event when the selected tree options change.
    /// </summary>    
    private async Task ChangedSelectedTreeOptions()
    {
        try
        {
            if (_selectedTreeOptions is PageDto page && !_isChangeAfterSavingPage)
            {
                DisplayElementsAccordingToSelectedTreeOption(SelectedTreeOptions.Page);
                await ShowAlertMessageAsync("Načítání stránky...", AlertStyle.Info);

                _selectedPage = page;
                _pageSizeInBytes = page.SizeInBytes;
                await JS.InvokeVoidAsync("deleteElementContentById", PAGE_CONTENT_ID);

                var content = await ApiService.GetPageContentAsync(page.Id);
                await JS.InvokeVoidAsync("setElementContentById", PAGE_CONTENT_ID, content);
                ClearAlertMessage();
                return;
            }

            if (_selectedTreeOptions is SectionDto section)
            {
                ClearAlertMessage();
                DisplayElementsAccordingToSelectedTreeOption(SelectedTreeOptions.Section);
                _selectedSection = section;
                _selectedPage = null;
                await JS.InvokeVoidAsync("deleteElementContentById", PAGE_CONTENT_ID);
            }
        }
        catch (JSException ex)
        {
            await ShowAlertMessageAsync("Neočekávaná chyba. O problému víme a pracujeme na nápravě.", AlertStyle.Danger, true, true);
            _ = ApiClient.SendErrorAsync(ex.ToString());
        }
        catch (Exception ex)
        {
            await ShowAlertMessageAsync(ex.Message, AlertStyle.Danger, true, true);
        }
    }

    /// <summary>
    /// Opens the modal dialog for creating or editing a section.
    /// </summary>
    /// <param name="operation">The operation to perform (Create or Edit).</param>
    private void OpenModalSection(Operation operation)
    {
        if (operation == Operation.Create)
        {
            _selectedSection = new();
        }

        _modalSectionOperation = operation;
        _isOpenModalSection = true;
    }

    /// <summary>
    /// Handles the submission of the modal dialog for creating or editing a section.
    /// </summary>
    /// <param name="section">The section data to submit.</param>    
    private async Task OnSubmitModalSection(SectionDto section)
    {
        ClearAlertMessage();
        await SaveSectionAsync(section);
    }

    /// <summary>
    /// Saves the section asynchronously.
    /// </summary>
    /// <param name="section">The section to save.</param>    
    private async Task SaveSectionAsync(SectionDto section)
    {
        try
        {
            if (section.Id != 0)
            {
                await ApiService.UpdateSectionAsync(section);
            }
            else
            {
                await ApiService.CreateSectionAsync(section);
            }

            _sections = await ApiService.GetSectionsAsync();
            _sortOrder = SortOrder.ByDateAsc;
            SetSelectedTreeOptionsAfterSavingSection();

            await ShowAlertMessageAsync("Oddíl byl uložen", AlertStyle.Success, delay: 800);
        }
        catch (Exception ex)
        {
            await ShowAlertMessageAsync(ex.Message, AlertStyle.Danger, true, true);
        }
    }

    /// <summary>
    /// Sets the selected tree options after saving a section.
    /// </summary>
    private void SetSelectedTreeOptionsAfterSavingSection()
    {
        if (_selectedSection is null)
        {
            return;
        }

        if (_selectedSection.Id != 0)
        {
            _selectedTreeOptions = _sections.FirstOrDefault(section => section.Id == _selectedSection.Id);
        }
        else
        {
            _selectedTreeOptions = _sections.OrderByDescending(section => section.Id).FirstOrDefault();
        }
    }

    /// <summary>
    /// Handles the confirmation dialog for deleting a section.
    /// </summary>
    /// <param name="modalDialog">The confirmation dialog result.</param>    
    private async Task OnDialogDeleteSection(ModalDialog modalDialog)
    {
        if (modalDialog == ModalDialog.Yes && _selectedSection is not null)
        {
            await DeleteSectionAsync(_selectedSection.Id);
        }
    }

    /// <summary>
    /// Deletes a section asynchronously.
    /// </summary>
    /// <param name="sectionId">The ID of the section to delete.</param>    
    private async Task DeleteSectionAsync(int sectionId)
    {
        await ShowAlertMessageAsync("Vymazávání oddílu...", AlertStyle.Info);

        try
        {
            _selectedSection = null;
            await ApiService.DeleteSectionAsync(sectionId);

            _sections = await ApiService.GetSectionsAsync();
            DisplayElementsAccordingToSelectedTreeOption(SelectedTreeOptions.None);

            await ShowAlertMessageAsync("Oddíl byl vymazán", AlertStyle.Success, delay: 800);
        }
        catch (Exception ex)
        {
            await ShowAlertMessageAsync(ex.Message, AlertStyle.Danger, true, true);
        }
    }

    /// <summary>
    /// Handles the submission of the modal dialog for adding or editing a page.
    /// </summary>
    /// <param name="addedPage">The added or edited page data.</param>    
    private async Task OnSubmitModalPage(PageDto addedPage)
    {
        ClearAlertMessage();

        _selectedPage = addedPage;
        await SavePageAsync();
    }

    /// <summary>
    /// Saves the selected page asynchronously.
    /// </summary>    
    private async Task SavePageAsync()
    {
        if (_selectedPage is null)
        {
            return;
        }

        await ShowAlertMessageAsync("Ukládání stránky...", AlertStyle.Info);

        try
        {
            if (_selectedPage.Id != 0)
            {
                await Task.Run(async () =>  // Task vytvořen, aby byla JS metoda zpracována v samostatném vláknu a díky tomu se v UI vláknu zobrazila alert message
                {
                    _selectedPage.Content = await JS.InvokeAsync<string>("getElementContentById", PAGE_CONTENT_ID);
                });

                _selectedPage.Title = _selectedPage.Title != string.Empty
                    ? _selectedPage.Title.Trim()
                    : "Nepojmenovaná stránka";

                await ApiService.UpdatePageAsync(_selectedPage);
            }
            else
            {
                _selectedPage.SectionId = _selectedSection?.Id
                    ?? throw new ArgumentNullException(nameof(_selectedSection), "Chyba při ukládání stránky. Zkuste to prosím znovu.");

                await ApiService.AddPageAsync(_selectedPage);
            }

            _sections = await ApiService.GetSectionsAsync();
            _sortOrder = SortOrder.ByDateAsc;
            DisplayElementsAccordingToSelectedTreeOption(SelectedTreeOptions.Page);

            SetSelectedTreeOptionsAfterSavingPage();
            await JS.InvokeVoidAsync("setFocusById", PAGE_CONTENT_ID);

            await ShowAlertMessageAsync("Stránka byla uložena", AlertStyle.Success, delay: 800);
        }
        catch (JSException ex)
        {
            _ = ApiClient.SendErrorAsync(ex.ToString());
        }
        catch (Exception ex)
        {
            await ShowAlertMessageAsync(ex.Message, AlertStyle.Danger, true, true);
        }
    }

    /// <summary>
    /// Sets the selected tree options after saving a page.
    /// </summary>
    private void SetSelectedTreeOptionsAfterSavingPage()
    {
        if (_selectedPage is null)
        {
            return;
        }

        _isChangeAfterSavingPage = true;

        if (_selectedPage.Id != 0)
        {
            _selectedPage = _sections.FirstOrDefault(section => section.Id == _selectedPage.SectionId)?.Pages.FirstOrDefault(x => x.Id == _selectedPage.Id);
            _selectedTreeOptions = _selectedPage;
            _pageSizeInBytes = _selectedPage is not null ? _selectedPage.SizeInBytes : 0;
        }
        else
        {
            _selectedPage = _sections.FirstOrDefault(section => section.Id == _selectedSection?.Id)?.Pages.LastOrDefault();
            _selectedTreeOptions = _selectedPage;
        }

        StateHasChanged();
        _isChangeAfterSavingPage = false;
    }

    /// <summary>
    /// Handles the confirmation dialog for deleting a page.
    /// </summary>
    /// <param name="modalDialog">The confirmation dialog result.</param>    
    private async Task OnDialogDeletePage(ModalDialog modalDialog)
    {
        if (modalDialog == ModalDialog.Yes && _selectedPage is not null)
        {
            await DeletePageAsync(_selectedPage.Id);
        }
    }

    /// <summary>
    /// Deletes a page asynchronously.
    /// </summary>
    /// <param name="pageId">The ID of the page to delete.</param>    
    private async Task DeletePageAsync(int pageId)
    {
        await ShowAlertMessageAsync("Vymazávání stránky...", AlertStyle.Info);

        try
        {
            await JS.InvokeVoidAsync("deleteElementContentById", PAGE_CONTENT_ID);
            await ApiService.DeletePageAsync(pageId);

            _sections = await ApiService.GetSectionsAsync();
            DisplayElementsAccordingToSelectedTreeOption(SelectedTreeOptions.Section);

            _selectedTreeOptions = _sections.FirstOrDefault(section => section.Id == _selectedPage?.SectionId);
            _selectedPage = null;

            await ShowAlertMessageAsync("Stránka byla vymazána", AlertStyle.Success, delay: 800);
        }
        catch (JSException ex)
        {
            _ = ApiClient.SendErrorAsync(ex.ToString());
        }
        catch (Exception ex)
        {
            await ShowAlertMessageAsync(ex.Message, AlertStyle.Danger, true, true);
        }
    }

    /// <summary>
    /// Gets the title of the selected page.
    /// </summary>
    /// <returns>The title of the selected page, or an empty string if no page is selected.</returns>
    private string GetSelectedPageTitle()
    {
        return _selectedPage?.Title ?? string.Empty;
    }

    /// <summary>
    /// Gets the name of the selected section.
    /// </summary>
    /// <returns>The name of the selected section, or an empty string if no section is selected.</returns>
    private string GetSelectedSectionName()
    {
        return _selectedSection?.Name ?? string.Empty;
    }

    /// <summary>
    /// Gets the name of a section by its ID.
    /// </summary>
    /// <param name="id">ID of the section.</param>
    /// <returns>The name of the section if found, otherwise an empty string.</returns>
    private string GetSectionNameById(int id)
    {
        return _sections.FirstOrDefault(x => x.Id == id)?.Name ?? string.Empty;
    }

    /// <summary>
    /// Displays or hides UI elements based on the selected tree options.
    /// </summary>
    /// <param name="selectedOptions">The selected tree options.</param>
    private void DisplayElementsAccordingToSelectedTreeOption(SelectedTreeOptions selectedOptions)
    {
        _isSelectedPage = false;
        _isSelectedSection = false;
        _setDisplayProperty = "display: none;";


        if (selectedOptions == SelectedTreeOptions.Page)
        {
            _isSelectedPage = true;
            _setDisplayProperty = string.Empty;
        }

        if (selectedOptions == SelectedTreeOptions.Section)
        {
            _isSelectedSection = true;
        }
    }

    /// <summary>
    /// Generates a collection of image size options as key-value pairs where the key is a string representation of the size in pixels,
    /// and the value is the corresponding integer size in pixels.
    /// </summary>
    /// <returns>
    /// A collection of <see cref="KeyValuePair{string, int}"/> containing key-value pairs representing image size options.
    /// The key is the size in pixels as a string (e.g., "50 px"), and the value is the size in pixels as an integer.
    /// </returns>
    private IEnumerable<KeyValuePair<string, int>> GetImageSizeOptions()
    {
        var options = new List<KeyValuePair<string, int>>();

        options.Add(new KeyValuePair<string, int>("25 px", 25));

        for (int i = 1; i <= 30; i++)
        {
            options.Add(new KeyValuePair<string, int>($"{50 * i} px", 50 * i));
        }

        return options;
    }

    /// <summary>
    /// Gets the selected image size for inserting images into the page.
    /// </summary>
    /// <returns>The selected image size.</returns>
    private int GetSelectedImageSize()
    {
        const int defaultSize = 25;
        return _selectedImageSize != 0 ? _selectedImageSize : defaultSize;
    }

    /// <summary>
    /// Shows an alert message with the specified style and options.
    /// </summary>
    /// <param name="message">The message to show.</param>
    /// <param name="style">The style of the alert (e.g., Info, Danger).</param>
    /// <param name="showIcon">Indicates whether to show an icon (default is false).</param>
    /// <param name="allowClose">Indicates whether the alert can be closed (default is false).</param>
    /// <param name="delay">The optional delay in milliseconds before clearing the message.</param>
    private async Task ShowAlertMessageAsync(string message, AlertStyle style, bool showIcon = false, bool allowClose = false, int delay = 0)
    {
        ClearAlertMessage();
        _alertMessages.Add(new AlertMessage
            {
                Style = style,
                Text = message,
                ShowIcon = showIcon,
                AllowClose = allowClose
            });

        if (delay > 0)
        {
            StateHasChanged();
            await Task.Delay(delay);
            ClearAlertMessage();
        }
    }

    /// <summary>
    /// Clears all alert messages.
    /// </summary>
    private void ClearAlertMessage()
    {
        _alertMessages.Clear();
        StateHasChanged();
    }

    /// <summary>
    /// Shows a notification message.
    /// </summary>
    /// <param name="summary">The summary of the notification.</param>
    /// <param name="detail">The detail of the notification.</param>
    private void ShowNotification(string summary, string detail = "")
    {
        var message = new NotificationMessage()
            {
                Style = "position:fixed; top:50%; left:50%; transform:translate(-50%, -50%);",
                Severity = NotificationSeverity.Success,
                Summary = summary,
                Detail = detail
            };

        NotificationService.Notify(message);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                _sections = await ApiService.GetSectionsAsync();
            }
            catch (Exception ex)
            {
                await ShowAlertMessageAsync(ex.Message, AlertStyle.Danger, true, true);
            }

            await JS.InvokeVoidAsync("setListenersDivContenteditable", PAGE_CONTENT_ID);

            _isVisibleLoadingSpinner = false;

            StateHasChanged();
        }
    }
}